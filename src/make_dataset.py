# -*- coding: utf-8 -*-
"""make_dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lcHPAitIiM8b8fGvBdUOGIfLvfVyKsNZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

plt.style.use('default')

def read_file_csv(filename):
    df = pd.read_csv(os.path.join('../data/raw/', filename)).set_index('ID')
    print(filename, ' cargado correctamente')
    return df

def data_preparation(store, test, train):
    print("Iniciando preparación de datos...")

    # Convertir la columna Date a tipo datetime
    train['Date'] = pd.to_datetime(train['Date'], errors='coerce')
    test['Date'] = pd.to_datetime(test['Date'], errors='coerce')

    # Imputación de valores nulos
    store.fillna({
        'CompetitionDistance': store['CompetitionDistance'].median(),
        'CompetitionOpenSinceMonth': 0,
        'CompetitionOpenSinceYear': 0,
        'Promo2SinceWeek': 0,
        'Promo2SinceYear': 0,
        'PromoInterval': "None"
    }, inplace=True)

    test['Open'].fillna(1, inplace=True)

    train_full = train.merge(store, on='Store', how='left')
    test_full = test.merge(store, on='Store', how='left')

    train_full.fillna({
        'CompetitionDistance': train_full['CompetitionDistance'].median(),
        'CompetitionOpenSinceMonth': 0,
        'CompetitionOpenSinceYear': 0,
        'Promo2SinceWeek': 0,
        'Promo2SinceYear': 0,
        'PromoInterval': 'None'
    }, inplace=True)

    # Extraer características de fecha
    def extract_date_features(df):
        df['Year'] = df['Date'].dt.year
        df['Month'] = df['Date'].dt.month
        df['Day'] = df['Date'].dt.day
        df['WeekOfYear'] = df['Date'].dt.isocalendar().week.astype(int)
        df['IsWeekend'] = df['Date'].dt.dayofweek.apply(lambda x: 1 if x >= 5 else 0)
        return df

    train_full = extract_date_features(train_full)
    test_full = extract_date_features(test_full)

    # Agregar características de la competencia
    def add_competition_features(df):
        df['CompetitionOpenDate'] = pd.to_datetime(
            dict(year=df['CompetitionOpenSinceYear'].astype(int),
                 month=df['CompetitionOpenSinceMonth'].astype(int),
                 day=1), errors='coerce'
        )
        df['CompetitionTimeOpen'] = ((df['Date'] - df['CompetitionOpenDate']).dt.days / 30).clip(lower=0)
        return df

    train_full = add_competition_features(train_full)
    test_full = add_competition_features(test_full)

    # Agregar características de promoción
    def add_promo2_features(df):
        df['Promo2StartDate'] = pd.to_datetime(
            df[['Promo2SinceYear', 'Promo2SinceWeek']].astype('Int64'),
            format='%Y%W', errors='coerce'
        )
        df['Promo2Time'] = ((df['Date'] - df['Promo2StartDate']).dt.days / 7).clip(lower=0)
        return df

    train_full = add_promo2_features(train_full)
    test_full = add_promo2_features(test_full)

    # Codificación one-hot
    categorical_cols = ['StateHoliday', 'StoreType', 'Assortment', 'PromoInterval']
    train_full_encoded = pd.get_dummies(train_full, columns=categorical_cols, drop_first=True)
    test_full_encoded = pd.get_dummies(test_full, columns=categorical_cols, drop_first=True)

    # Alineación de columnas
    train_full_encoded, test_full_encoded = train_full_encoded.align(test_full_encoded, join='outer', axis=1, fill_value=0)

    print("Preparación de datos finalizada.")
    return train_full_encoded, test_full_encoded

def data_exporting(df, filename):
    os.makedirs('../data/processed/', exist_ok=True)  # Crear carpeta si no existe
    filepath = os.path.join('../data/processed/', filename)
    df.to_csv(filepath, index=False)
    print(f"{filename} exportado correctamente en la carpeta processed")
    return filepath

def main():
    print("Cargando datos...")
    train = read_file_csv('train.csv')
    store = read_file_csv('store.csv')
    test = read_file_csv('test.csv')

    print("Procesando datos...")
    train_processed, test_processed = data_preparation(store, test, train)

    print("Exportando datos procesados...")
    data_exporting(train_processed, 'train_processed.csv')
    data_exporting(test_processed, 'test_processed.csv')

    print("Proceso completado con éxito.")

if __name__ == "__main__":
    main()